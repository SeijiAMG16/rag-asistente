{"ast":null,"code":"import axios from \"axios\";\n\n// URL base de la API del backend Django\nconst defaultBase = typeof window !== 'undefined' ? `${window.location.protocol}//${window.location.hostname}:8000` : 'http://127.0.0.1:8000';\nconst API_BASE = process.env.REACT_APP_API_BASE || defaultBase;\n\n// Variable global para almacenar el token de acceso\nlet accessToken = null;\nlet refreshToken = null;\n\n/**\r\n * Función para establecer el token de acceso JWT\r\n * Se llama después del login exitoso\r\n */\nexport function setAccessToken(token) {\n  accessToken = token;\n  try {\n    localStorage.setItem('token', token);\n  } catch {}\n}\nexport function setRefreshToken(token) {\n  refreshToken = token;\n  try {\n    localStorage.setItem('refresh', token || '');\n  } catch {}\n}\nfunction getStoredAccessToken() {\n  if (accessToken) return accessToken;\n  try {\n    return localStorage.getItem('token');\n  } catch {\n    return null;\n  }\n}\nfunction getStoredRefreshToken() {\n  if (refreshToken) return refreshToken;\n  try {\n    return localStorage.getItem('refresh');\n  } catch {\n    return null;\n  }\n}\nfunction clearTokens() {\n  accessToken = null;\n  refreshToken = null;\n  try {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh');\n  } catch {}\n}\n\n// Crear instancia de axios con configuración base\nconst api = axios.create({\n  baseURL: API_BASE\n});\n\n// Interceptor para agregar el token JWT a las peticiones (lee de memoria y localStorage)\napi.interceptors.request.use(config => {\n  const url = (config.url || '').toString();\n  const isAuthEndpoint = url.includes('/auth/token') || url.includes('/auth/refresh') || url.includes('/auth/register');\n  if (!isAuthEndpoint) {\n    const token = getStoredAccessToken();\n    if (token) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n});\n\n// Interceptor para manejar respuestas y errores de autenticación\napi.interceptors.response.use(resp => resp, async error => {\n  var _error$response;\n  const originalRequest = error.config || {};\n  const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  const url = (originalRequest.url || '').toString();\n  const isAuthEndpoint = url.includes('/auth/token') || url.includes('/auth/refresh') || url.includes('/auth/register');\n  if (status === 401 && !originalRequest._retry && !isAuthEndpoint) {\n    originalRequest._retry = true;\n    const rToken = getStoredRefreshToken();\n    if (rToken) {\n      try {\n        const {\n          data\n        } = await axios.post(`${API_BASE}/auth/refresh`, {\n          refresh: rToken\n        });\n        setAccessToken(data.access);\n        if (data.refresh) setRefreshToken(data.refresh);\n        originalRequest.headers = originalRequest.headers || {};\n        originalRequest.headers.Authorization = `Bearer ${data.access}`;\n        return api.request(originalRequest);\n      } catch (e) {\n        clearTokens();\n      }\n    } else {\n      clearTokens();\n    }\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * Función para iniciar sesión\r\n * Envía credenciales al endpoint /auth/token y obtiene los tokens JWT\r\n */\nexport async function login(username, password) {\n  const {\n    data\n  } = await api.post(\"/auth/token\", {\n    username,\n    password\n  });\n  // Guardar el token de acceso para futuras peticiones\n  setAccessToken(data.access);\n  setRefreshToken(data.refresh || '');\n  // TODO: Guardar el refresh token de forma segura (localStorage o cookie)\n  return data;\n}\n\n/**\r\n * Función para registrar nuevos usuarios\r\n * Envía datos al endpoint /auth/register\r\n */\nexport async function register(username, email, password) {\n  const {\n    data\n  } = await api.post(\"/auth/register\", {\n    username,\n    email,\n    password\n  });\n  return data;\n}\n\n/**\r\n * Función para realizar consultas RAG al sistema\r\n * Envía la pregunta y recibe respuesta con fuentes\r\n */\nexport async function query(question, top_k = 3, conversation_id) {\n  const {\n    data\n  } = await api.post(\"/query\", {\n    question,\n    top_k,\n    conversation_id\n  });\n  return data;\n}\n\n/**\r\n * Función para ingerir documentos en el sistema\r\n * Permite subir archivos para ser procesados por el RAG\r\n */\nexport async function ingest(payload) {\n  const {\n    data\n  } = await api.post(\"/ingest\", payload);\n  return data;\n}\n\n// Sincroniza PDFs desde Google Drive\nexport async function syncDrive() {\n  const {\n    data\n  } = await api.post(\"/sync-drive\", {});\n  return data;\n}\n\n// Sube un PDF y lo ingiere\nexport async function uploadPdf(file, opts = {}) {\n  const form = new FormData();\n  form.append('file', file);\n  if (opts.chunk_size) form.append('chunk_size', String(opts.chunk_size));\n  if (opts.chunk_overlap) form.append('chunk_overlap', String(opts.chunk_overlap));\n  const {\n    data\n  } = await api.post(\"/ingest/upload\", form, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return data;\n}\n\n/**\r\n * Función para verificar el estado del servidor\r\n * Endpoint de health check\r\n */\nexport async function health() {\n  const {\n    data\n  } = await api.get(\"/health\");\n  return data;\n}\n\n// Listar conversaciones del usuario\nexport async function getConversations() {\n  const {\n    data\n  } = await api.get('/conversations');\n  return data;\n}\n\n// Listar mensajes de una conversación\nexport async function getMessages(convId) {\n  const {\n    data\n  } = await api.get(`/conversations/${convId}/messages`);\n  return data;\n}","map":{"version":3,"names":["axios","defaultBase","window","location","protocol","hostname","API_BASE","process","env","REACT_APP_API_BASE","accessToken","refreshToken","setAccessToken","token","localStorage","setItem","setRefreshToken","getStoredAccessToken","getItem","getStoredRefreshToken","clearTokens","removeItem","api","create","baseURL","interceptors","request","use","config","url","toString","isAuthEndpoint","includes","headers","Authorization","response","resp","error","_error$response","originalRequest","status","_retry","rToken","data","post","refresh","access","e","Promise","reject","login","username","password","register","email","query","question","top_k","conversation_id","ingest","payload","syncDrive","uploadPdf","file","opts","form","FormData","append","chunk_size","String","chunk_overlap","health","get","getConversations","getMessages","convId"],"sources":["C:/Users/amaya/Downloads/rag-asistente-main/rag-asistente-main/frontend-react/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// URL base de la API del backend Django\r\nconst defaultBase = (typeof window !== 'undefined')\r\n  ? `${window.location.protocol}//${window.location.hostname}:8000`\r\n  : 'http://127.0.0.1:8000';\r\nconst API_BASE = process.env.REACT_APP_API_BASE || defaultBase;\r\n\r\n// Variable global para almacenar el token de acceso\r\nlet accessToken = null;\r\nlet refreshToken = null;\r\n\r\n/**\r\n * Función para establecer el token de acceso JWT\r\n * Se llama después del login exitoso\r\n */\r\nexport function setAccessToken(token) {\r\n  accessToken = token;\r\n  try { localStorage.setItem('token', token); } catch {}\r\n}\r\n\r\nexport function setRefreshToken(token) {\r\n  refreshToken = token;\r\n  try { localStorage.setItem('refresh', token || ''); } catch {}\r\n}\r\n\r\nfunction getStoredAccessToken() {\r\n  if (accessToken) return accessToken;\r\n  try { return localStorage.getItem('token'); } catch { return null; }\r\n}\r\n\r\nfunction getStoredRefreshToken() {\r\n  if (refreshToken) return refreshToken;\r\n  try { return localStorage.getItem('refresh'); } catch { return null; }\r\n}\r\n\r\nfunction clearTokens() {\r\n  accessToken = null;\r\n  refreshToken = null;\r\n  try { localStorage.removeItem('token'); localStorage.removeItem('refresh'); } catch {}\r\n}\r\n\r\n// Crear instancia de axios con configuración base\r\nconst api = axios.create({ baseURL: API_BASE });\r\n\r\n// Interceptor para agregar el token JWT a las peticiones (lee de memoria y localStorage)\r\napi.interceptors.request.use((config) => {\r\n  const url = (config.url || '').toString();\r\n  const isAuthEndpoint = url.includes('/auth/token') || url.includes('/auth/refresh') || url.includes('/auth/register');\r\n  if (!isAuthEndpoint) {\r\n    const token = getStoredAccessToken();\r\n    if (token) {\r\n      config.headers = config.headers || {};\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n  }\r\n  return config;\r\n});\r\n\r\n// Interceptor para manejar respuestas y errores de autenticación\r\napi.interceptors.response.use(\r\n  (resp) => resp,\r\n  async (error) => {\r\n    const originalRequest = error.config || {};\r\n    const status = error.response?.status;\r\n    const url = (originalRequest.url || '').toString();\r\n    const isAuthEndpoint = url.includes('/auth/token') || url.includes('/auth/refresh') || url.includes('/auth/register');\r\n\r\n    if (status === 401 && !originalRequest._retry && !isAuthEndpoint) {\r\n      originalRequest._retry = true;\r\n      const rToken = getStoredRefreshToken();\r\n      if (rToken) {\r\n        try {\r\n          const { data } = await axios.post(`${API_BASE}/auth/refresh`, { refresh: rToken });\r\n          setAccessToken(data.access);\r\n          if (data.refresh) setRefreshToken(data.refresh);\r\n          originalRequest.headers = originalRequest.headers || {};\r\n          originalRequest.headers.Authorization = `Bearer ${data.access}`;\r\n          return api.request(originalRequest);\r\n        } catch (e) {\r\n          clearTokens();\r\n        }\r\n      } else {\r\n        clearTokens();\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * Envía credenciales al endpoint /auth/token y obtiene los tokens JWT\r\n */\r\nexport async function login(username, password) {\r\n  const { data } = await api.post(\"/auth/token\", { username, password });\r\n  // Guardar el token de acceso para futuras peticiones\r\n  setAccessToken(data.access);\r\n  setRefreshToken(data.refresh || '');\r\n  // TODO: Guardar el refresh token de forma segura (localStorage o cookie)\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para registrar nuevos usuarios\r\n * Envía datos al endpoint /auth/register\r\n */\r\nexport async function register(username, email, password) {\r\n  const { data } = await api.post(\"/auth/register\", { username, email, password });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para realizar consultas RAG al sistema\r\n * Envía la pregunta y recibe respuesta con fuentes\r\n */\r\nexport async function query(question, top_k = 3, conversation_id) {\r\n  const { data } = await api.post(\"/query\", { question, top_k, conversation_id });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para ingerir documentos en el sistema\r\n * Permite subir archivos para ser procesados por el RAG\r\n */\r\nexport async function ingest(payload) {\r\n  const { data } = await api.post(\"/ingest\", payload);\r\n  return data;\r\n}\r\n\r\n// Sincroniza PDFs desde Google Drive\r\nexport async function syncDrive() {\r\n  const { data } = await api.post(\"/sync-drive\", {});\r\n  return data;\r\n}\r\n\r\n// Sube un PDF y lo ingiere\r\nexport async function uploadPdf(file, opts = {}) {\r\n  const form = new FormData();\r\n  form.append('file', file);\r\n  if (opts.chunk_size) form.append('chunk_size', String(opts.chunk_size));\r\n  if (opts.chunk_overlap) form.append('chunk_overlap', String(opts.chunk_overlap));\r\n  const { data } = await api.post(\"/ingest/upload\", form, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para verificar el estado del servidor\r\n * Endpoint de health check\r\n */\r\nexport async function health() {\r\n  const { data } = await api.get(\"/health\");\r\n  return data;\r\n}\r\n\r\n// Listar conversaciones del usuario\r\nexport async function getConversations() {\r\n  const { data } = await api.get('/conversations');\r\n  return data;\r\n}\r\n\r\n// Listar mensajes de una conversación\r\nexport async function getMessages(convId) {\r\n  const { data } = await api.get(`/conversations/${convId}/messages`);\r\n  return data;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}