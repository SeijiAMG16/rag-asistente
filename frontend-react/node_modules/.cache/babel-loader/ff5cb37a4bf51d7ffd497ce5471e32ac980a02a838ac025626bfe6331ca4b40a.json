{"ast":null,"code":"import axios from \"axios\";\n\n// URL base de la API del backend Django\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:8000\";\n\n// Variable global para almacenar el token de acceso\nlet accessToken = null;\n\n/**\r\n * Función para establecer el token de acceso JWT\r\n * Se llama después del login exitoso\r\n */\nexport function setAccessToken(token) {\n  accessToken = token;\n  try {\n    localStorage.setItem('token', token);\n  } catch {}\n}\n\n// Crear instancia de axios con configuración base\nconst api = axios.create({\n  baseURL: API_BASE\n});\n\n// Interceptor para agregar el token JWT a las peticiones (lee de memoria y localStorage)\napi.interceptors.request.use(config => {\n  const token = accessToken || (() => {\n    try {\n      return localStorage.getItem('token');\n    } catch {\n      return null;\n    }\n  })();\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor para manejar respuestas y errores de autenticación\napi.interceptors.response.use(resp => resp, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // TODO: Implementar lógica de refresh token aquí\n    // Por ahora, simplemente limpiar el token y redirigir al login\n    setAccessToken(null);\n    // Nota: En una implementación completa, aquí intentaríamos renovar el token\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * Función para iniciar sesión\r\n * Envía credenciales al endpoint /auth/token y obtiene los tokens JWT\r\n */\nexport async function login(username, password) {\n  const {\n    data\n  } = await api.post(\"/auth/token\", {\n    username,\n    password\n  });\n  // Guardar el token de acceso para futuras peticiones\n  setAccessToken(data.access);\n  // TODO: Guardar el refresh token de forma segura (localStorage o cookie)\n  return data;\n}\n\n/**\r\n * Función para registrar nuevos usuarios\r\n * Envía datos al endpoint /auth/register\r\n */\nexport async function register(username, email, password) {\n  const {\n    data\n  } = await api.post(\"/auth/register\", {\n    username,\n    email,\n    password\n  });\n  return data;\n}\n\n/**\r\n * Función para realizar consultas RAG al sistema\r\n * Envía la pregunta y recibe respuesta con fuentes\r\n */\nexport async function query(question, top_k = 3, conversation_id) {\n  const {\n    data\n  } = await api.post(\"/query\", {\n    question,\n    top_k,\n    conversation_id\n  });\n  return data;\n}\n\n/**\r\n * Función para ingerir documentos en el sistema\r\n * Permite subir archivos para ser procesados por el RAG\r\n */\nexport async function ingest(payload) {\n  const {\n    data\n  } = await api.post(\"/ingest\", payload);\n  return data;\n}\n\n/**\r\n * Función para verificar el estado del servidor\r\n * Endpoint de health check\r\n */\nexport async function health() {\n  const {\n    data\n  } = await api.get(\"/health\");\n  return data;\n}","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_API_BASE","accessToken","setAccessToken","token","localStorage","setItem","api","create","baseURL","interceptors","request","use","config","getItem","headers","Authorization","response","resp","error","_error$response","status","Promise","reject","login","username","password","data","post","access","register","email","query","question","top_k","conversation_id","ingest","payload","health","get"],"sources":["C:/Users/amaya/Downloads/rag-asistente-main/rag-asistente-main/frontend-react/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// URL base de la API del backend Django\r\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:8000\";\r\n\r\n// Variable global para almacenar el token de acceso\r\nlet accessToken = null;\r\n\r\n/**\r\n * Función para establecer el token de acceso JWT\r\n * Se llama después del login exitoso\r\n */\r\nexport function setAccessToken(token) {\r\n  accessToken = token;\r\n  try { localStorage.setItem('token', token); } catch {}\r\n}\r\n\r\n// Crear instancia de axios con configuración base\r\nconst api = axios.create({ baseURL: API_BASE });\r\n\r\n// Interceptor para agregar el token JWT a las peticiones (lee de memoria y localStorage)\r\napi.interceptors.request.use((config) => {\r\n  const token = accessToken || (() => { try { return localStorage.getItem('token'); } catch { return null; } })();\r\n  if (token) {\r\n    config.headers = config.headers || {};\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Interceptor para manejar respuestas y errores de autenticación\r\napi.interceptors.response.use(\r\n  (resp) => resp,\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      // TODO: Implementar lógica de refresh token aquí\r\n      // Por ahora, simplemente limpiar el token y redirigir al login\r\n      setAccessToken(null);\r\n      // Nota: En una implementación completa, aquí intentaríamos renovar el token\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * Envía credenciales al endpoint /auth/token y obtiene los tokens JWT\r\n */\r\nexport async function login(username, password) {\r\n  const { data } = await api.post(\"/auth/token\", { username, password });\r\n  // Guardar el token de acceso para futuras peticiones\r\n  setAccessToken(data.access);\r\n  // TODO: Guardar el refresh token de forma segura (localStorage o cookie)\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para registrar nuevos usuarios\r\n * Envía datos al endpoint /auth/register\r\n */\r\nexport async function register(username, email, password) {\r\n  const { data } = await api.post(\"/auth/register\", { username, email, password });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para realizar consultas RAG al sistema\r\n * Envía la pregunta y recibe respuesta con fuentes\r\n */\r\nexport async function query(question, top_k = 3, conversation_id) {\r\n  const { data } = await api.post(\"/query\", { question, top_k, conversation_id });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para ingerir documentos en el sistema\r\n * Permite subir archivos para ser procesados por el RAG\r\n */\r\nexport async function ingest(payload) {\r\n  const { data } = await api.post(\"/ingest\", payload);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Función para verificar el estado del servidor\r\n * Endpoint de health check\r\n */\r\nexport async function health() {\r\n  const { data } = await api.get(\"/health\");\r\n  return data;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}