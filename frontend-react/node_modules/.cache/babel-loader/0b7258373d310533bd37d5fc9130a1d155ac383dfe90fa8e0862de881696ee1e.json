{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:8000\";\nlet accessToken = null;\nexport function setAccessToken(token) {\n  accessToken = token;\n}\nconst api = axios.create({\n  baseURL: API_BASE\n});\napi.interceptors.request.use(config => {\n  if (accessToken) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n});\napi.interceptors.response.use(resp => resp, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // TODO: intentar refresh si hay refresh token almacenado\n    // Redirigir a login si falla\n  }\n  return Promise.reject(error);\n});\nexport async function login(username, password) {\n  const {\n    data\n  } = await api.post(\"/auth/token\", {\n    username,\n    password\n  });\n  setAccessToken(data.access);\n  return data;\n}\nexport async function query(question, top_k = 3, conversation_id) {\n  const {\n    data\n  } = await api.post(\"/query\", {\n    question,\n    top_k,\n    conversation_id\n  });\n  return data;\n}\nexport async function ingest(payload) {\n  const {\n    data\n  } = await api.post(\"/ingest\", payload);\n  return data;\n}\nexport async function health() {\n  const {\n    data\n  } = await api.get(\"/health\");\n  return data;\n}","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_API_BASE","accessToken","setAccessToken","token","api","create","baseURL","interceptors","request","use","config","headers","Authorization","response","resp","error","_error$response","status","Promise","reject","login","username","password","data","post","access","query","question","top_k","conversation_id","ingest","payload","health","get"],"sources":["C:/Users/amaya/Downloads/rag-asistente-main/rag-asistente-main/frontend-react/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:8000\";\r\n\r\nlet accessToken = null;\r\nexport function setAccessToken(token) {\r\n  accessToken = token;\r\n}\r\n\r\nconst api = axios.create({ baseURL: API_BASE });\r\n\r\napi.interceptors.request.use((config) => {\r\n  if (accessToken) {\r\n    config.headers = config.headers || {};\r\n    config.headers.Authorization = `Bearer ${accessToken}`;\r\n  }\r\n  return config;\r\n});\r\n\r\napi.interceptors.response.use(\r\n  (resp) => resp,\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      // TODO: intentar refresh si hay refresh token almacenado\r\n      // Redirigir a login si falla\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport async function login(username, password) {\r\n  const { data } = await api.post(\"/auth/token\", { username, password });\r\n  setAccessToken(data.access);\r\n  return data;\r\n}\r\n\r\nexport async function query(question, top_k = 3, conversation_id) {\r\n  const { data } = await api.post(\"/query\", { question, top_k, conversation_id });\r\n  return data;\r\n}\r\n\r\nexport async function ingest(payload) {\r\n  const { data } = await api.post(\"/ingest\", payload);\r\n  return data;\r\n}\r\n\r\nexport async function health() {\r\n  const { data } = await api.get(\"/health\");\r\n  return data;\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;AAE1E,IAAIC,WAAW,GAAG,IAAI;AACtB,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EACpCF,WAAW,GAAGE,KAAK;AACrB;AAEA,MAAMC,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC;EAAEC,OAAO,EAAET;AAAS,CAAC,CAAC;AAE/CO,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,IAAIT,WAAW,EAAE;IACfS,MAAM,CAACC,OAAO,GAAGD,MAAM,CAACC,OAAO,IAAI,CAAC,CAAC;IACrCD,MAAM,CAACC,OAAO,CAACC,aAAa,GAAG,UAAUX,WAAW,EAAE;EACxD;EACA,OAAOS,MAAM;AACf,CAAC,CAAC;AAEFN,GAAG,CAACG,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAC1BK,IAAI,IAAKA,IAAI,EACd,MAAOC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACf,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACA;EAAA;EAEF,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,eAAeK,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMnB,GAAG,CAACoB,IAAI,CAAC,aAAa,EAAE;IAAEH,QAAQ;IAAEC;EAAS,CAAC,CAAC;EACtEpB,cAAc,CAACqB,IAAI,CAACE,MAAM,CAAC;EAC3B,OAAOF,IAAI;AACb;AAEA,OAAO,eAAeG,KAAKA,CAACC,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,eAAe,EAAE;EAChE,MAAM;IAAEN;EAAK,CAAC,GAAG,MAAMnB,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAE;IAAEG,QAAQ;IAAEC,KAAK;IAAEC;EAAgB,CAAC,CAAC;EAC/E,OAAON,IAAI;AACb;AAEA,OAAO,eAAeO,MAAMA,CAACC,OAAO,EAAE;EACpC,MAAM;IAAER;EAAK,CAAC,GAAG,MAAMnB,GAAG,CAACoB,IAAI,CAAC,SAAS,EAAEO,OAAO,CAAC;EACnD,OAAOR,IAAI;AACb;AAEA,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAC7B,MAAM;IAAET;EAAK,CAAC,GAAG,MAAMnB,GAAG,CAAC6B,GAAG,CAAC,SAAS,CAAC;EACzC,OAAOV,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}