# üîÑ SINCRONIZAR GOOGLE DRIVE - RAG ASISTENTE
# =============================================
# 
# Script PowerShell para sincronizaci√≥n autom√°tica con Google Drive
# Incluye descarga de PDFs, procesamiento y ingesta en ChromaDB
#
# USO:
#   .\SINCRONIZAR_DRIVE.ps1           # Sincronizaci√≥n b√°sica
#   .\SINCRONIZAR_DRIVE.ps1 -Setup    # Configuraci√≥n inicial
#   .\SINCRONIZAR_DRIVE.ps1 -Force    # Forzar re-descarga
#   .\SINCRONIZAR_DRIVE.ps1 -Status   # Ver estado

param(
    [switch]$Setup,         # Ejecutar configuraci√≥n inicial
    [switch]$Force,         # Forzar re-descarga de todos los PDFs
    [switch]$Status,        # Mostrar estado del sistema
    [switch]$Daemon,        # Iniciar daemon de sincronizaci√≥n
    [int]$ChunkSize = 800,  # Tama√±o de chunks para ETL
    [int]$Interval = 30     # Intervalo en minutos para daemon
)

Write-Host "üîÑ SINCRONIZACI√ìN GOOGLE DRIVE - RAG ASISTENTE" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green
Write-Host ""

# Verificar que estamos en el directorio correcto
$currentDir = Get-Location
$backendDir = $currentDir
$projectRoot = Split-Path $backendDir -Parent

if (-not (Test-Path "manage.py")) {
    Write-Host "‚ùå Error: Ejecuta desde el directorio backend" -ForegroundColor Red
    Write-Host "   Directorio actual: $currentDir" -ForegroundColor Yellow
    exit 1
}

Write-Host "üìÅ Directorio backend: $backendDir" -ForegroundColor Cyan
Write-Host "üìÅ Directorio proyecto: $projectRoot" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para verificar si Python est√° disponible
function Test-PythonEnvironment {
    try {
        $pythonVersion = & python --version 2>&1
        if ($pythonVersion -match "Python") {
            Write-Host "‚úÖ Python disponible: $pythonVersion" -ForegroundColor Green
            return $true
        }
    }
    catch {
        Write-Host "‚ùå Python no encontrado en PATH" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para activar entorno virtual si existe
function Enable-VirtualEnvironment {
    $venvPaths = @(
        ".venv\Scripts\Activate.ps1",
        "venv\Scripts\Activate.ps1",
        "$projectRoot\.venv\Scripts\Activate.ps1",
        "$projectRoot\venv\Scripts\Activate.ps1"
    )
    
    foreach ($venvPath in $venvPaths) {
        if (Test-Path $venvPath) {
            Write-Host "üîß Activando entorno virtual: $venvPath" -ForegroundColor Yellow
            try {
                & $venvPath
                Write-Host "‚úÖ Entorno virtual activado" -ForegroundColor Green
                return $true
            }
            catch {
                Write-Host "‚ö†Ô∏è Error activando entorno virtual: $_" -ForegroundColor Yellow
            }
        }
    }
    
    Write-Host "‚ö†Ô∏è Entorno virtual no encontrado, usando Python del sistema" -ForegroundColor Yellow
    return $false
}

# Funci√≥n para instalar dependencias de Google Drive
function Install-GoogleDriveDependencies {
    Write-Host "üì¶ Instalando dependencias de Google Drive..." -ForegroundColor Yellow
    
    $packages = @(
        "google-api-python-client",
        "google-auth-httplib2",
        "google-auth-oauthlib",
        "python-dotenv"
    )
    
    foreach ($package in $packages) {
        Write-Host "   üì¶ Instalando: $package" -ForegroundColor Cyan
        try {
            & python -m pip install $package --quiet
            Write-Host "   ‚úÖ $package instalado" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ùå Error instalando $package`: $_" -ForegroundColor Red
            return $false
        }
    }
    
    Write-Host "‚úÖ Todas las dependencias instaladas" -ForegroundColor Green
    return $true
}

# Funci√≥n para verificar configuraci√≥n de Google Drive
function Test-GoogleDriveConfig {
    Write-Host "üîç Verificando configuraci√≥n de Google Drive..." -ForegroundColor Yellow
    
    # Verificar archivos necesarios
    $configFiles = @{
        "credentials.json" = "Credenciales de cuenta de servicio"
        ".env" = "Variables de entorno"
    }
    
    $allFilesExist = $true
    foreach ($file in $configFiles.Keys) {
        if (Test-Path $file) {
            Write-Host "   ‚úÖ $file - $($configFiles[$file])" -ForegroundColor Green
        }
        else {
            Write-Host "   ‚ùå $file - $($configFiles[$file])" -ForegroundColor Red
            $allFilesExist = $false
        }
    }
    
    if (-not $allFilesExist) {
        Write-Host ""
        Write-Host "‚ö†Ô∏è Configuraci√≥n incompleta. Ejecuta con -Setup para configurar" -ForegroundColor Yellow
        return $false
    }
    
    # Verificar variables de entorno en .env
    if (Test-Path ".env") {
        $envContent = Get-Content ".env" -ErrorAction SilentlyContinue
        $hasGoogleDrive = $envContent | Where-Object { $_ -match "GOOGLE_DRIVE_ENABLED.*true" }
        $hasFolderId = $envContent | Where-Object { $_ -match "DRIVE_FOLDER_ID.*=" }
        
        if ($hasGoogleDrive) {
            Write-Host "   ‚úÖ Google Drive habilitado" -ForegroundColor Green
        }
        else {
            Write-Host "   ‚ö†Ô∏è Google Drive no habilitado en .env" -ForegroundColor Yellow
        }
        
        if ($hasFolderId) {
            Write-Host "   ‚úÖ ID de carpeta configurado" -ForegroundColor Green
        }
        else {
            Write-Host "   ‚ùå ID de carpeta no configurado" -ForegroundColor Red
            return $false
        }
    }
    
    Write-Host "‚úÖ Configuraci√≥n b√°sica correcta" -ForegroundColor Green
    return $true
}

# Funci√≥n principal para setup
function Invoke-GoogleDriveSetup {
    Write-Host "üîß CONFIGURACI√ìN INICIAL DE GOOGLE DRIVE" -ForegroundColor Cyan
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host ""
    
    # Instalar dependencias
    if (-not (Install-GoogleDriveDependencies)) {
        Write-Host "‚ùå Error instalando dependencias" -ForegroundColor Red
        return $false
    }
    
    Write-Host ""
    Write-Host "üöÄ Ejecutando configurador autom√°tico..." -ForegroundColor Yellow
    
    try {
        & python setup_google_drive.py
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Configuraci√≥n completada exitosamente" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "‚ùå Error en configuraci√≥n autom√°tica" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Error ejecutando configurador: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para mostrar estado
function Show-GoogleDriveStatus {
    Write-Host "üìä ESTADO DEL SISTEMA GOOGLE DRIVE" -ForegroundColor Cyan
    Write-Host "===================================" -ForegroundColor Cyan
    Write-Host ""
    
    try {
        & python manage.py start_drive_sync --action status
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "‚úÖ Estado obtenido exitosamente" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è Error obteniendo estado" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå Error ejecutando comando de estado: $_" -ForegroundColor Red
    }
}

# Funci√≥n para sincronizaci√≥n completa
function Invoke-DriveSync {
    param([bool]$ForceDownload = $false)
    
    Write-Host "üîÑ INICIANDO SINCRONIZACI√ìN COMPLETA" -ForegroundColor Cyan
    Write-Host "====================================" -ForegroundColor Cyan
    Write-Host ""
    
    # Construir comando
    $syncCommand = "python manage.py sync_drive_full --chunk-size $ChunkSize"
    
    if ($ForceDownload) {
        $syncCommand += " --force"
        Write-Host "üî• Modo FORZADO: Re-descargando todos los PDFs" -ForegroundColor Yellow
    }
    
    Write-Host "üìã Ejecutando: $syncCommand" -ForegroundColor Cyan
    Write-Host ""
    
    try {
        # Ejecutar sincronizaci√≥n
        Invoke-Expression $syncCommand
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "‚úÖ Sincronizaci√≥n completada exitosamente" -ForegroundColor Green
            
            # Mostrar resumen de archivos
            Write-Host ""
            Write-Host "üìä RESUMEN POST-SINCRONIZACI√ìN:" -ForegroundColor Cyan
            
            $dataDir = "data"
            if (Test-Path "$dataDir\pdfs") {
                $pdfCount = (Get-ChildItem "$dataDir\pdfs" -Filter "*.pdf" -ErrorAction SilentlyContinue).Count
                Write-Host "   üìÑ PDFs descargados: $pdfCount" -ForegroundColor Green
            }
            
            if (Test-Path "$dataDir\texts") {
                $txtCount = (Get-ChildItem "$dataDir\texts" -Filter "*.txt" -ErrorAction SilentlyContinue).Count
                Write-Host "   üìù Textos extra√≠dos: $txtCount" -ForegroundColor Green
            }
            
            # Verificar ChromaDB
            $chromaDbPath = "chroma_db_simple"
            if (Test-Path $chromaDbPath) {
                Write-Host "   üóÑÔ∏è Base vectorial: ‚úÖ Actualizada" -ForegroundColor Green
            }
            else {
                Write-Host "   üóÑÔ∏è Base vectorial: ‚ö†Ô∏è No encontrada" -ForegroundColor Yellow
            }
            
            return $true
        }
        else {
            Write-Host ""
            Write-Host "‚ùå Error en sincronizaci√≥n (c√≥digo: $LASTEXITCODE)" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Error ejecutando sincronizaci√≥n: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para iniciar daemon
function Start-SyncDaemon {
    Write-Host "üîÑ INICIANDO DAEMON DE SINCRONIZACI√ìN" -ForegroundColor Cyan
    Write-Host "=====================================" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "‚è±Ô∏è Intervalo configurado: $Interval minutos" -ForegroundColor Yellow
    Write-Host "üîÑ Sincronizaci√≥n autom√°tica inici√°ndose..." -ForegroundColor Yellow
    Write-Host ""
    
    try {
        & python manage.py start_drive_sync --action start --interval $Interval
        
        Write-Host ""
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Daemon iniciado exitosamente" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Error iniciando daemon" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "‚ùå Error ejecutando daemon: $_" -ForegroundColor Red
    }
}

# L√ìGICA PRINCIPAL
# ================

# Verificar Python
if (-not (Test-PythonEnvironment)) {
    Write-Host "‚ùå Python no disponible. Instala Python 3.8+ y aseg√∫rate que est√© en PATH" -ForegroundColor Red
    exit 1
}

# Activar entorno virtual
Enable-VirtualEnvironment | Out-Null

Write-Host ""

# Procesar par√°metros
if ($Setup) {
    # Ejecutar configuraci√≥n inicial
    $setupSuccess = Invoke-GoogleDriveSetup
    if (-not $setupSuccess) {
        Write-Host ""
        Write-Host "‚ùå Error en configuraci√≥n inicial" -ForegroundColor Red
        exit 1
    }
}
elseif ($Status) {
    # Mostrar estado
    Show-GoogleDriveStatus
}
elseif ($Daemon) {
    # Iniciar daemon
    if (-not (Test-GoogleDriveConfig)) {
        Write-Host "‚ùå Configuraci√≥n incompleta. Ejecuta con -Setup primero" -ForegroundColor Red
        exit 1
    }
    Start-SyncDaemon
}
else {
    # Sincronizaci√≥n normal
    if (-not (Test-GoogleDriveConfig)) {
        Write-Host "‚ùå Configuraci√≥n incompleta. Ejecuta con -Setup primero" -ForegroundColor Red
        Write-Host ""
        Write-Host "üí° Para configurar: .\SINCRONIZAR_DRIVE.ps1 -Setup" -ForegroundColor Yellow
        exit 1
    }
    
    $syncSuccess = Invoke-DriveSync -ForceDownload $Force
    if (-not $syncSuccess) {
        Write-Host ""
        Write-Host "‚ùå Error en sincronizaci√≥n" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "üéâ Proceso completado exitosamente" -ForegroundColor Green
Write-Host ""
Write-Host "üí° COMANDOS √öTILES:" -ForegroundColor Cyan
Write-Host "   .\SINCRONIZAR_DRIVE.ps1           # Sincronizaci√≥n normal" -ForegroundColor White
Write-Host "   .\SINCRONIZAR_DRIVE.ps1 -Force    # Forzar re-descarga" -ForegroundColor White
Write-Host "   .\SINCRONIZAR_DRIVE.ps1 -Status   # Ver estado" -ForegroundColor White
Write-Host "   .\SINCRONIZAR_DRIVE.ps1 -Daemon   # Iniciar autom√°tico" -ForegroundColor White
Write-Host ""